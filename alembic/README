Generic single-database configuration with an async dbapi.

### Основные команды:
**Справка (список всех команд)**
```
alembic -h
```


**Инициализация библиотеки Alembic**
```
alembic init
```


**Создание миграций (автогенерация)**
```
alembic revision --autogenerate -m <enter_migration_name>
```
Комментарий:
Однако Alembic не всегда корректно распознаёт внесённые изменения при автогенерации. 
Например, переименование таблицы (изменение приватного атрибута __tablename__ в модели) он может воспринять как задачу «удалить таблицу и создать новую», 
что грозит потерей всех данных в таблице; то же и с переименованием атрибутов модели (колонок таблиц). 
В таких случаях необходимо вручную внести правки в файл миграций.
Полный список возможностей и ограничений автогенерации можно посмотреть в документации.
https://alembic.sqlalchemy.org/en/latest/autogenerate.html#what-does-autogenerate-detect-and-what-does-it-not-detect


**Выполнение всех непримененных миграций:**
```
alembic upgrade head 
```

**Отменить все миграции:**
```
alembic downgrade base 
```

**Посмотреть все миграции в хронологическом порядке:**
```
alembic history 
```
более подробно:
```
alembic history -v 
```


**Последняя примененная миграция:**
```
alembic current
```

**Актуальная миграция с меткой:**
При просмотре истории миграций можно вывести метку актуальной миграции: для этого надо указать ключ -i (или --indicate-current в полной форме):
```
alembic history -i 
```

**Гибкий запуск миграций:**
Команды upgrade и downgrade можно применять не только с параметрами head и base,
но и с указанием конкретных Revision ID, до которых надо применить или откатить миграции.

**Применить все миграции вплоть до указанной:**
```
alembic upgrade befcaa650c3f
```

**Откатить все миграции вплоть до указанной:**
```
alembic downgrade 466f1da3d4b1
```

**Относительное указание миграций:**
Выполнить две следующие миграции:
```
alembic ugprade +2
```

Откатить три предыдущие миграции:
```
alembic downgrade -3
```